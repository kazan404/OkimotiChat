<h3>ChatRoom</h3>

@page "/chatroom"
@using OkimotiChatApplication.Data
@inject NavigationManager navigationManager
@inject ChatOkimotiService chatOkimotiService
@inject ChatParticipantService chatParticipantService
@using Microsoft.AspNetCore.SignalR.Client;

@implements IAsyncDisposable

<h1>お気持ちチャット</h1>
<hr />

@if (!_isChatting)
{
    <p>
        今の参加人数：<b>@_numRoomParticipant</b>
    </p>

    <p>
        部屋の中はこんな感じ：<b>@_roomOkimoti</b>
    </p>

    <p>
        今、どんな気持ち？:
    </p>
    <input type="text" maxlength="32" @bind="@_okimoti" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>あなたは <b>@_username</b> さんです。</span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // banner to show room participant
    <div>
        <span class="oi oi-chat" aria-hidden="true"></span>
        <span>今の参加者は<b>@_roomParticipant</b></span>
    </div>
    // banner to show room okimoti
    <div>
        <span class="oi oi-clipboard" aria-hidden="true"></span>
        <span>今の雰囲気は<b>@_roomOkimoti</b></span>
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
    </div>
}

@code 
{
    // flag to indicate chat status
    private bool _isChatting = false;

    private string _okimoti;

    private string _numRoomParticipant = "0";

    // name of the user who will be chatting
    private string _username;
    private int _usernameNum;
    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    // _roomOkimoti
    private string _roomOkimoti;

    // _roomParticipant
    private string _roomParticipant;

    private List<string> _okimotes = new List<string>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    /// <summary>
    /// 遷移してきた直後の処理
    /// </summary>
    protected override void OnInitialized()
    {
        _roomOkimoti = "None";
        RefreshRoomParticipantNum();
        RefreshRoomOkimoti();
        if (_roomOkimoti.Equals(String.Empty))
        {
            _roomOkimoti = "None";
        }
    }

    public async Task Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(_okimoti))
        {
            _message = "Please enter a mind";
            return;
        };

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // ユーザー名はランダムなIDとする
            _usernameNum = new System.Random().Next(0, 1001);
            _username = _usernameNum.ToString();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + BlazorChat.BlazorChatSampleHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);
            _hubConnection.On("RefreshRoomParticipant", RefreshRoomParticipant);
            _hubConnection.On("RefreshRoomOkimoti", RefreshRoomOkimoti);

            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {_username} joined chat room.");

            chatParticipantService.SubmitParticipant(_usernameNum, _usernameNum.ToString());
            chatOkimotiService.SubmitOkimoti(_usernameNum, _okimoti);

            await ParticipantAsync();
            await OkimotiAsync();
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void RefreshRoomParticipant()
    {
        _roomParticipant = chatParticipantService.GetRoomParticipant();
        StateHasChanged();
    }
    private void RefreshRoomOkimoti()
    {
        _roomOkimoti = chatOkimotiService.GetRoomOkimoti();
        // Inform blazor the UI needs updating
        StateHasChanged();
    }
    private void RefreshRoomParticipantNum()
    {
        _numRoomParticipant = chatParticipantService.GetRoomParticipantNum().ToString();
        StateHasChanged();
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            chatParticipantService.DeleteParticipant(_usernameNum);
            chatOkimotiService.DeleteOkimoti(_usernameNum);

            await _hubConnection.SendAsync("RefreshOkimoti");

            await SendAsync($"[Notice] {_username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", _username, message);

            _newMessage = string.Empty;
        }
    }

    private async Task ParticipantAsync()
    {
        if (_isChatting)
        {
            await _hubConnection.SendAsync("RefreshParticipant");
        }
    }
    private async Task OkimotiAsync()
    {
        if (_isChatting)
        {
            await _hubConnection.SendAsync("RefreshOkimoti");
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }

    public async ValueTask DisposeAsync()
    {
        chatParticipantService.DeleteParticipant(_usernameNum);
        chatOkimotiService.DeleteOkimoti(_usernameNum);

        await _hubConnection.SendAsync("RefreshOkimoti");

        await SendAsync($"[Notice] {_username} left chat room.");

        await _hubConnection.StopAsync();
        await _hubConnection.DisposeAsync();

        _hubConnection = null;
        _isChatting = false;
    }
}
